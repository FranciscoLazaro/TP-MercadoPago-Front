import React from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { Box, Button, Container, FormControl, Grid, InputLabel, MenuItem, Select, TextField, Typography, Alert } from '@mui/material';
import { Formik, Form, Field, ErrorMessage, FormikHelpers } from 'formik';
import * as Yup from 'yup';

import { Rol } from '../../../types/enum/Rol';
import UsuarioService from '../../../service/UsuarioService';

interface FormValues {
  nombreUsuario: string;
  clave: string;
  rol: Rol;
}

const Register: React.FC = () => {
  const navigate = useNavigate();
  const usuarioService = new UsuarioService();
  const URL = import.meta.env.VITE_API_URL;

  const validationSchema = Yup.object({
    nombreUsuario: Yup.string().required('Nombre de usuario es requerido'),
    clave: Yup.string().required('Contraseña es requerida'),
    rol: Yup.string().oneOf(Object.values(Rol), 'Rol inválido').required('Rol es requerido'),
  });

  const initialValues: FormValues = {
    nombreUsuario: '',
    clave: '',
    rol: Rol.VISOR,
  };

  const handleSubmit = async (values: FormValues, { setSubmitting, setErrors }: FormikHelpers<FormValues>) => {
    const usuarioData = {
      id: 0,  // Assuming the ID is generated by the server
      nombreUsuario: values.nombreUsuario,
      clave: values.clave,
      rol: values.rol
    };

    try {
      const response = await fetch(`http://localhost:8080/Usuario/getByName?nombre=${values.nombreUsuario}`);
      if (response.ok) {
        const existingUser = await response.json();
        if (existingUser) {
          setErrors({ nombreUsuario: 'Nombre de usuario ya está en uso' });
          setSubmitting(false);
          return;
        }
      }

      const newUsuario = await usuarioService.post(`${URL}/Usuario`, usuarioData);
      console.log('Usuario registrado:', newUsuario);
      navigate('/');
    } catch (error) {
      console.error('Error registrando el usuario:', error);
      setSubmitting(false);
    }
  };

  return (
    <Container component="main" maxWidth="xs">
      <Box
        sx={{
          marginTop: 8,
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
        }}
      >
        <Typography component="h1" variant="h5">
          Registrarse
        </Typography>
        <Formik
          initialValues={initialValues}
          validationSchema={validationSchema}
          onSubmit={handleSubmit}
        >
          {({ errors, touched, handleChange, values, isSubmitting }) => (
            <Form>
              {errors.nombreUsuario && touched.nombreUsuario && (
                <Alert severity="error">{errors.nombreUsuario}</Alert>
              )}
              {errors.clave && touched.clave && (
                <Alert severity="error">{errors.clave}</Alert>
              )}
              {errors.rol && touched.rol && (
                <Alert severity="error">{errors.rol}</Alert>
              )}
              <Field
                as={TextField}
                margin="normal"
                required
                fullWidth
                id="nombreUsuario"
                label="Nombre de usuario"
                name="nombreUsuario"
                autoComplete="username"
                value={values.nombreUsuario}
                onChange={handleChange}
                error={touched.nombreUsuario && Boolean(errors.nombreUsuario)}
                helperText={touched.nombreUsuario && errors.nombreUsuario}
              />
              <Field
                as={TextField}
                margin="normal"
                required
                fullWidth
                name="clave"
                label="Contraseña"
                type="password"
                id="clave"
                autoComplete="new-password"
                value={values.clave}
                onChange={handleChange}
                error={touched.clave && Boolean(errors.clave)}
                helperText={touched.clave && errors.clave}
              />
              <FormControl fullWidth margin="normal" required error={touched.rol && Boolean(errors.rol)}>
                <InputLabel id="rol-label">Rol</InputLabel>
                <Select
                  labelId="rol-label"
                  id="rol"
                  name="rol"
                  value={values.rol}
                  onChange={handleChange}
                  label="Rol"
                >
                  {Object.values(Rol).map((rolValue) => (
                    <MenuItem key={rolValue} value={rolValue}>
                      {rolValue}
                    </MenuItem>
                  ))}
                </Select>
                <div style={{ color: 'red', fontSize: '0.8em' }}>
                  <ErrorMessage name="rol" />
                </div>
              </FormControl>
              <Button
                type="submit"
                fullWidth
                variant="contained"
                sx={{ mt: 3, mb: 2 }}
                disabled={isSubmitting}
              >
                Registrarse
              </Button>
              <Grid container justifyContent="flex-end" sx={{ mt: 2 }}>
                <Grid item>
                  <Link to="/login">
                    ¿Ya tienes una cuenta? Iniciar Sesión
                  </Link>
                </Grid>
              </Grid>
            </Form>
          )}
        </Formik>
      </Box>
    </Container>
  );
};

export default Register;
